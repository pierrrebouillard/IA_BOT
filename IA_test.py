import os
import openai
from openai import OpenAIError
from utils.vector_store import load_vector_store  # Assurez-vous que ce module est accessible
import logging

# Configuration du logger pour afficher les messages dans la console
logging.basicConfig(level=logging.DEBUG, format="%(asctime)s [%(levelname)s] %(message)s")
logger = logging.getLogger(__name__)

# üîë R√©cup√©ration de la cl√© API OpenAI
# Remplacez par votre cl√© ou assurez-vous qu'elle est d√©finie dans vos variables d'environnement
api_key = ''
if not api_key:
    raise ValueError("‚ùå Aucune cl√© API d√©tect√©e !")
openai.api_key = api_key

# Chemin du vector store (doit √™tre identique √† celui utilis√© lors de la cr√©ation)
CHROMA_DB_PATH = "chroma_db"

def determine_filter(query: str):
    """
    D√©termine, √† partir de la requ√™te utilisateur, un filtre √† appliquer sur la recherche des documents.
    Par exemple, si la requ√™te contient "date" et "prochain" (ou "suiv"), on suppose que les informations
    sur les prochains matchs se trouvent dans la table "match_schedule". Si la requ√™te contient "score",
    on suppose que les scores se trouvent dans la table "match_scores".
    """
    query_lower = query.lower()
    if "date" in query_lower and ("prochain" in query_lower or "suiv" in query_lower):
        print("DEBUG: Filtrage sur la table 'match_schedule'")
        return {"table": "match_schedule"}
    elif "score" in query_lower:
        print("DEBUG: Filtrage sur la table 'match_scores'")
        return {"table": "match_scores"}
    else:
        return None

def main():
    # Chargement du vector store existant
    print("Chargement du vector store...")
    try:
        vector_store = load_vector_store()
        print("‚úÖ Vector store charg√©.")
    except Exception as e:
        print("Erreur lors du chargement du vector store:", e)
        logger.exception("Erreur lors du chargement du vector store")
        return

    print("\n=== Chatbot interactif ===")
    print("Tapez 'exit' ou 'quit' pour quitter.\n")

    while True:
        # Saisie de l'utilisateur
        user_input = input("üìù Tapez votre question: ")
        if user_input.lower() in ["exit", "quit"]:
            print("Arr√™t du chatbot.")
            break

        # D√©termine un √©ventuel filtre bas√© sur la requ√™te
        metadata_filter = determine_filter(user_input)

        try:
            # Recherche par similarit√© dans le vector store avec √©ventuellement un filtre sur les m√©tadonn√©es
            if metadata_filter:
                print("DEBUG: Utilisation du filtre:", metadata_filter)
                search_results = vector_store.similarity_search(user_input, k=3, filter=metadata_filter)
            else:
                search_results = vector_store.similarity_search(user_input, k=3)
            
            # Concat√®ne le contenu textuel des documents trouv√©s
            context = "\n".join([doc.page_content for doc in search_results])
            print("DEBUG: Contexte r√©cup√©r√© :")
            print(context)
            
            # Pr√©paration du prompt pour OpenAI
            messages = [
                {
                    "role": "system",
                    "content": (
                        "Tu es un expert en paris sportifs. "
                        "R√©ponds uniquement en te basant sur les donn√©es fournies ci-dessous, sans utiliser d'informations externes. "
                        "Si les donn√©es sont insuffisantes, indique-le clairement."
                    )
                },
                {
                    "role": "user",
                    "content": f"Voici les donn√©es pertinentes trouv√©es :\n{context}\n\nRequ√™te : {user_input}"
                }
            ]
            
            # Appel √† l'API OpenAI via ChatCompletion 
            response = openai.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=messages
            )
            chatbot_reply = response.choices[0].message.content
            print("\nü§ñ Chatbot :")
            print(chatbot_reply)
        except OpenAIError as e:
            print("Erreur OpenAI :", str(e))
        except Exception as ex:
            print("Erreur :", str(ex))
        print("\n" + "-" * 50 + "\n")

if __name__ == "__main__":
    main()

