try:
    from utils.database import get_db_connection  # Cas normal avec Streamlit et imports classiques
except ModuleNotFoundError:
    import sys
    import os

    sys.path.append(os.path.abspath(os.path.dirname(__file__)))  # Ajoute utils au chemin Python
    from database import get_db_connection  # Cas d'ex√©cution directe (ex: `python vector_store.py`)

import sqlite3
import os
from langchain_openai import OpenAIEmbeddings
from langchain_chroma import Chroma
from langchain.schema import Document

print("‚úÖ utils.vector_store import√© avec succ√®s !")

# üîë R√©cup√©ration s√©curis√©e de la cl√© API OpenAI
# Remplace cette cl√© en dur par une variable d'environnement si n√©cessaire.
api_key = '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'
if not api_key:
    raise ValueError("‚ùå Aucune cl√© API d√©tect√©e. V√©rifie que `OPENAI_API_KEY` est bien d√©fini.")

# ‚úÖ Mod√®le d'embedding LangChain (OpenAI)
embeddings_model = OpenAIEmbeddings(openai_api_key=api_key)

# üìÇ Chemin du VectorStore Chroma
CHROMA_DB_PATH = "chroma_db"

def create_vector_store():
    """
    G√©n√®re une base vectorielle ChromaDB √† partir des tables SQLite.
    """
    print("üöÄ D√©but de la cr√©ation du vector store...")

    # ‚úÖ Connexion SQLite
    with get_db_connection() as conn:
        cursor = conn.cursor()

        # üî• R√©cup√©ration des noms de tables
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = [row[0] for row in cursor.fetchall()]
        print(f"üìå Tables d√©tect√©es : {tables}")

        # üìå Liste pour stocker les documents vectoris√©s
        documents = []

        # ‚úÖ Initialisation de ChromaDB
        vector_store = Chroma(embedding_function=embeddings_model, persist_directory=CHROMA_DB_PATH)

        # üî• Extraction des donn√©es de chaque table avec contexte des colonnes
        for table in tables:
            print(f"üì° Traitement de la table : {table}")

            # ‚úÖ R√©cup√©ration des noms de colonnes
            cursor.execute(f"PRAGMA table_info({table})")
            columns_info = cursor.fetchall()
            column_names = [col[1] for col in columns_info]  # R√©cup√©rer seulement les noms des colonnes

            if not column_names:
                print(f"‚ö†Ô∏è Impossible de r√©cup√©rer les colonnes de `{table}`. Skipping...")
                continue

            print(f"üìä Colonnes d√©tect√©es pour `{table}`: {column_names}")

            # ‚úÖ R√©cup√©ration des donn√©es de la table
            cursor.execute(f"SELECT * FROM {table}")
            rows = cursor.fetchall()

            if not rows:
                print(f"‚ö†Ô∏è La table `{table}` est vide. Aucun embedding g√©n√©r√©.")
                continue

            # üîπ Conversion des donn√©es en texte structur√© avec noms de colonnes
            for row in rows:
                row_data = {col_name: value for col_name, value in zip(column_names, row)}
                text_data = " | ".join([f"{col}: {val}" for col, val in row_data.items()])

                # ‚úÖ Cr√©ation du document avec contexte enrichi
                doc = Document(page_content=text_data, metadata={"table": table})
                documents.append(doc)
                print(f"üìù Ajout du document : {doc}")

        # ‚úÖ Ajout des documents √† ChromaDB
        if documents:
            print("üîç Ajout des embeddings enrichis dans ChromaDB...")
            vector_store.add_documents(documents)
            print(f"‚úÖ Embeddings sauvegard√©s dans `{CHROMA_DB_PATH}`.")

    print("‚úÖ Fin de la cr√©ation du vector store.")

def load_vector_store():
    """
    Charge le vector store existant depuis le dossier persistant.
    """
    vector_store = Chroma(embedding_function=embeddings_model, persist_directory=CHROMA_DB_PATH)
    return vector_store

if __name__ == "__main__":
    create_vector_store()
